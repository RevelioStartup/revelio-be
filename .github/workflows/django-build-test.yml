name: Build and Test

on:
  push:
    branches: [ "main", "staging", "PBI-Venue" ]
  pull_request:
    branches: [ "main", "staging", "PBI-Venue" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set Up Environment Variables
      run: |
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "OPENAI_API_ORGANIZATION_ID=${{ secrets.OPENAI_API_ORGANIZATION_ID }}" >> .env
        cp .env revelio/.env
        echo "GOOGLE_STORAGE_BUCKET=${{ secrets.GOOGLE_STORAGE_BUCKET }}" >> .env
        cp .env revelio/.env
        echo "GOOGLE_CREDENTIALS_FILE=${{ secrets.GOOGLE_CREDENTIALS_FILE }}" >> .env
        cp .env revelio/.env

    - name: Run Tests
      run: |
        python manage.py test
  
  sonarqube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

    - name: Set Up GCS Credentials
      run: |
        echo '{
          "type": "service_account",
          "project_id": "'${{ secrets.PROJECT_ID }}'",
          "private_key_id": "'${{ secrets.PRIVATE_KEY_ID }}'",
          "private_key": "'${{ secrets.PRIVATE_KEY }}'",
          "client_email": "'${{ secrets.CLIENT_EMAIL }}'",
          "client_id": "'${{ secrets.CLIENT_ID }}'",
          "auth_uri": "'${{ secrets.AUTH_URI }}'",
          "token_uri": "'${{ secrets.TOKEN_URI }}'",
          "auth_provider_x509_cert_url": "'${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}'",
          "client_x509_cert_url": "'${{ secrets.CLIENT_X509_CERT_URL }}'",
          "universe_domain": "'${{ secrets.UNIVERSE_DOMAIN }}'"
        }' > dotted-lexicon-415505-86934bc0f37c.json
        
      - name: Set Up Environment Variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "OPENAI_API_ORGANIZATION_ID=${{ secrets.OPENAI_API_ORGANIZATION_ID }}" >> .env
          cp .env revelio/.env
          echo "GOOGLE_STORAGE_BUCKET=${{ secrets.GOOGLE_STORAGE_BUCKET }}" >> .env
          cp .env revelio/.env
          echo "GOOGLE_CREDENTIALS_FILE=${{ secrets.GOOGLE_CREDENTIALS_FILE }}" >> .env
          cp .env revelio/.env

      - name: Run tests and generate coverage
        run: |
          coverage run --source='.' manage.py test
          coverage xml -o ./coverage.xml

      - name: Install SonarQube Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
          echo "SONAR_SCANNER_HOME=/opt/sonar-scanner" >> $GITHUB_ENV
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scanner
        run: sonar-scanner -D"sonar.projectKey=revelio" -D"sonar.sources=." -D"sonar.host.url=https://sonarqube.cs.ui.ac.id" -D"sonar.login=$SONAR_TOKEN"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}